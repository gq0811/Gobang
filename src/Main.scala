package src



object Main {
  def main(args: Array[String]): Unit = {

    var sl = new Solution
    //map  reduce 的用法
    var arr3: Array[String] = new Array(4)
    arr3(2) = "dce"
    //sl.twoSum2(arr3,7).foreach(x=>println(x))
    //println(sl.isValidString(""))
    //println("".length)
    case class User(id: Int, name: String, age: Int)
    var user1 = User(2, "nie", 76)
    var user2 = User(3, "gq", 2)
    var user3 = User(5, "gtr", 65)
    var userList = List(user1, user2, user3)

    sl.testSet("svfd,svfd,ghfg,ghfg,rewre")

    //适用的场景是带Option类型的参数

    case class Good(id:String,sn:String,relation:String )
    var goodArray:Array[Good]=new Array(7)
    goodArray(0)=new Good("123","241","545")
    goodArray(1)=new Good("1234","","548")
    goodArray(2)=new Good("1235","","547")
    goodArray(3)=new Good("1236","243","549")
    goodArray(4)=new Good("1237","av243","5456")
    goodArray(5)=new Good("1238","sd243","5494")
    goodArray(6)=new Good("1239","243","549")
    var tmpMap=goodArray.groupBy(_.sn)
    tmpMap.map{x=>
      println(x._1)
      x._2.foreach(god=>println(god))
    }
    //println(tmpMap)


    var ls = List(9, 3, 5, 5, 7).toArray
    //println(ls.headOption)

    var arr = Map[Int, String](1 -> "43", 3 -> "32")
    var sh = sl.showCapital(arr.get(4))

    var ssr="386518,343081,332152,298925,362389,386940,349582,383145,360665,374267,405715,306626,360352,346010,398097,383609,383351,389601,281526,355819,323750,369421,376509,386945,388366,370309,386115,349088,378560,344949,377124,371667,396506,397279,341164,309501,373379,376126,329059,390357,368192,355125,393755,282293,325081,375054,371276,351809,364143,363553,377089,373952,339034,394803,337405,368022,326838,393098,362394,389600,291349,388686,396984,350562,389738,369889,390222,251541,340999,385009,357340,335069,317627,310797,401646,368554,363010,374601,392707,336397,376953,284789,367169,374265,390336,366597,368058,346008,385028,392888,229237,380386,356312,348197,378929,384030,373101,366427,354304,373352,352454,337748,392571,382069,351252,368139,368036,352143,376181,400217,368077,379274,389715,388342,262221,380463,347369,390240,368067,368059,356049,387620,310830,387974,383348,229236,386651,327010,336969,348196,338495,396992,401922,375981,352879,382723,358136,368047,363858,358128,331555,381754,341637,337747,361955,380068,358124,371928,368078,389034,368041,347918,367130,262584,384032,315882,275759,341026,383615,356623,359304,377092,368546,396015,363556,392583,246042,346325,370541,336970,384392,346012,334243,369728,370002,369365,375630,332719,395518,400019,357339,378867,364435,330136,378925,401919,380069,302630,384469,369046,292476,381751,356897,398809,371290,377435,316049,329271,385564,359010,337398,338734,365489,395504,382562,356047,345756,332880,395020,337403,375058,375583,377837,369998,366020,368053,371534,379759,396498,378565,293973,235371,353776,393426,369574,277581,372320,314064,380593,349415,307077,399478,387250,368548,399336,384532,391649,377887,371695,316003,375057,388287,391653,383355,368070,333733,330768,373671,385069,375933,376515,387607,366903,344632,378865,385502,314063,340854,401917,330764,376511,384467,377447,329281,386939,397926,363015,353813,253522,366901,365470,386951,386313,364767,363011,333225,353809,399335,391656,373956,347441,375322,390763,362390,330800,384566,328331,345280,387383,388919,394125,383309,347896,387604,377466,385021,377983,357078,319157,373934,143115,395521,344629,324103,383011,351546,377434,324612,373380,379801,387258,403739,326597,366076,389178,393756,368080,221996"
    var speech=
      """fgd
        #cdasdc
        #{"yq":123,"777":777}
        #asa
      """.stripMargin('#').replaceAll("\n","")


    var ae = List(List(List(3, 4, 5), List(52, 1)), List(List(3, 5), List(45, 1))).flatten.flatten
    //println(ae)

    //对于一个字符串数组，我希望分割完单词之后，把这些单词放在一起。
    var array = List[String]("i love", "programming with my mac")
    array = array.flatMap(x => x.split(" "))
    //println(array)
    //创建一个函数的实例，有点类似matlab的函数句柄
    var f1: Int => String = myInt => "cdscs" + myInt

    //高阶函数：返回值是一个函数
    def multiplyBy(factor: Double) = (x: Double) => factor * x

    val f2 = multiplyBy(3.2)
    //print(f2(4))

    //高阶函数：把一个函数作为另外一个函数的参数
    def apply(f: Int => String, a: Int) = f(a)

    def layout[A](x: A) = "tsetcs" + x.toString


    var t = time()
    //print(add())
    // print(t)
    //delayed(time())
  }


  case class User(id: Int, name: String, age: Option[Int])

  val user1 = User(2, "nie", Some(18))
  var age = user1.age.getOrElse("meiyoushuju")

  def intensiveComputation(): Int = {
    Thread.sleep(5000)
    return 1
  }


  def time() = {
    println("获取时间，单位为纳秒")
    System.nanoTime
  }

  def delayed(t: => Long) = {
    println("在 delayed 方法内")
    println("参数： " + t)

  }

  var flag: Boolean = false

  def add(a: Int = 8, b: Int = 6): Int = {
    flag match {
      case true => a + b
      case false => a + b + b
    }
  }


}
